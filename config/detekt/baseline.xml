<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues/>
  <CurrentIssues>
    <ID>CyclomaticComplexMethod:HomeScreenUiStateCreator.kt$HomeScreenUiStateCreator$fun HomeScreenUiState.Content.Companion.create( fingerprintSdkResponse: FingerprintJSProResult, smartSignalsData: SmartSignalsData, isLoading: Boolean, onSmartSignalDocClicked: (url: String) -&gt; Unit = {}, onHideSignupPrompt: () -&gt; Unit = {}, onPutToClipboard: (String) -&gt; Unit = {}, onSignupPromptClicked: () -&gt; Unit = {}, onReload: () -&gt; Unit = {}, onSupportClicked: () -&gt; Unit = {}, onGotoApiKeysSettings: () -&gt; Unit = {}, ): HomeScreenUiState.Content</ID>
    <ID>CyclomaticComplexMethod:HomeScreenUiStateCreator.kt$HomeScreenUiStateCreator$fun HomeScreenUiState.Content.LoadingOrSuccess.Companion.create( fingerprintJSProResponse: FingerprintJSProResponse, smartSignals: SmartSignals?, // null indicates that endpoint info is not set in the app isLoading: Boolean, isSmartSignalsLoading: Boolean, onSmartSignalDocClicked: (url: String) -&gt; Unit = {}, onHideSignupPrompt: () -&gt; Unit = {}, onPutToClipboard: (String) -&gt; Unit = {}, onSignupPromptClicked: () -&gt; Unit = {}, ): HomeScreenUiState.Content.LoadingOrSuccess</ID>
    <ID>CyclomaticComplexMethod:JSONSyntaxHighlighter.kt$JSONSyntaxHighlighter.JSONTokenizer$fun nextToken(): Token?</ID>
    <ID>FunctionNaming:SettingsDetailsUiState.kt$SettingsDetailsUiState.ValidationPromptState.Companion$fun InvalidKeysState( onCancel: () -&gt; Unit, onContinue: suspend () -&gt; Unit, )</ID>
    <ID>FunctionOnlyReturningConstant:AppModule.kt$AppModule$@Provides @AppScope @Named("networkTimeoutMillis") fun provideNetworkCallTimeoutMillis(): Int</ID>
    <ID>LongMethod:EventDetailsView.kt$@OptIn(ExperimentalFoundationApi::class) @Composable fun EventDetailsView( modifier: Modifier, prettifiedProperties: List&lt;PrettifiedProperty&gt;, rawJson: String?, isLoading: Boolean, isSmartSignalsLoading: Boolean, )</ID>
    <ID>LongMethod:EventPrettifiedView.kt$@OptIn(ExperimentalFoundationApi::class) @Composable private fun PrettifiedPropertyView( modifier: Modifier, name: String, value: String, isValueFaded: Boolean, isValueItalic: Boolean, onLongClick: () -&gt; Unit, onLongClickEnabled: Boolean, isSmartSignal: Boolean, onSmartSignalClick: () -&gt; Unit = {}, isLoading: Boolean, isLast: Boolean, )</ID>
    <ID>LongMethod:HomeLoadingOrSuccessScreen.kt$@Composable fun HomeLoadingOrSuccessScreen( modifier: Modifier, state: HomeScreenUiState.Content.LoadingOrSuccess, )</ID>
    <ID>LongMethod:HomeScreen.kt$@OptIn(ExperimentalAnimationApi::class, ExperimentalMaterial3Api::class) @Composable fun HomeScreenInternal( modifier: Modifier = Modifier, state: HomeScreenUiState, )</ID>
    <ID>LongMethod:HomeScreenUiStateCreator.kt$HomeScreenUiStateCreator$fun HomeScreenUiState.Content.Companion.create( fingerprintSdkResponse: FingerprintJSProResult, smartSignalsData: SmartSignalsData, isLoading: Boolean, onSmartSignalDocClicked: (url: String) -&gt; Unit = {}, onHideSignupPrompt: () -&gt; Unit = {}, onPutToClipboard: (String) -&gt; Unit = {}, onSignupPromptClicked: () -&gt; Unit = {}, onReload: () -&gt; Unit = {}, onSupportClicked: () -&gt; Unit = {}, onGotoApiKeysSettings: () -&gt; Unit = {}, ): HomeScreenUiState.Content</ID>
    <ID>LongMethod:HomeScreenUiStateCreator.kt$HomeScreenUiStateCreator$fun HomeScreenUiState.Content.LoadingOrSuccess.Companion.create( fingerprintJSProResponse: FingerprintJSProResponse, smartSignals: SmartSignals?, // null indicates that endpoint info is not set in the app isLoading: Boolean, isSmartSignalsLoading: Boolean, onSmartSignalDocClicked: (url: String) -&gt; Unit = {}, onHideSignupPrompt: () -&gt; Unit = {}, onPutToClipboard: (String) -&gt; Unit = {}, onSignupPromptClicked: () -&gt; Unit = {}, ): HomeScreenUiState.Content.LoadingOrSuccess</ID>
    <ID>LongMethod:NavScreen.kt$@SuppressLint("UnusedMaterial3ScaffoldPaddingParameter") @Composable fun NavScreen()</ID>
    <ID>LongMethod:SettingsDetailsScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable private fun SettingsDetailsScreenInternal( state: SettingsDetailsUiState, modifier: Modifier = Modifier, sharedTransitionScope: SharedTransitionScope? = null, animatedContentScope: AnimatedContentScope? = null, )</ID>
    <ID>LongMethod:Shimmable.kt$@Composable fun &lt;T&gt; Shimmable( state: ShimmableState&lt;T&gt;, modifier: Modifier = Modifier, content: @Composable (ShimmableState&lt;T&gt;) -&gt; Unit, )</ID>
    <ID>LongParameterList:EventPrettifiedView.kt$( modifier: Modifier, name: String, value: String, isValueFaded: Boolean, isValueItalic: Boolean, onLongClick: () -&gt; Unit, onLongClickEnabled: Boolean, isSmartSignal: Boolean, onSmartSignalClick: () -&gt; Unit = {}, isLoading: Boolean, isLast: Boolean, )</ID>
    <ID>LongParameterList:HomeScreenUiStateCreator.kt$HomeScreenUiStateCreator$( fingerprintJSProResponse: FingerprintJSProResponse, smartSignals: SmartSignals?, // null indicates that endpoint info is not set in the app isLoading: Boolean, isSmartSignalsLoading: Boolean, onSmartSignalDocClicked: (url: String) -&gt; Unit = {}, onHideSignupPrompt: () -&gt; Unit = {}, onPutToClipboard: (String) -&gt; Unit = {}, onSignupPromptClicked: () -&gt; Unit = {}, )</ID>
    <ID>LongParameterList:HomeScreenUiStateCreator.kt$HomeScreenUiStateCreator$( fingerprintSdkResponse: FingerprintJSProResult, smartSignalsData: SmartSignalsData, isLoading: Boolean, onSmartSignalDocClicked: (url: String) -&gt; Unit = {}, onHideSignupPrompt: () -&gt; Unit = {}, onPutToClipboard: (String) -&gt; Unit = {}, onSignupPromptClicked: () -&gt; Unit = {}, onReload: () -&gt; Unit = {}, onSupportClicked: () -&gt; Unit = {}, onGotoApiKeysSettings: () -&gt; Unit = {}, )</ID>
    <ID>LongParameterList:LinkableText.kt$( text: AnnotatedString, modifier: Modifier = Modifier, links: List&lt;LinkableText.Link&gt; = emptyList(), style: TextStyle = LocalTextStyle.current, color: Color = Color.Unspecified, linkColor: Color = MaterialTheme.colorScheme.primary, textAlign: TextAlign = TextAlign.Unspecified, overflow: TextOverflow = TextOverflow.Clip, maxLines: Int = Int.MAX_VALUE, inlineContent: Map&lt;String, InlineTextContent&gt; = mapOf(), )</ID>
    <ID>LongParameterList:SmartSignals.kt$SmartSignals$( val clonedApp: SmartSignalInfo&lt;SmartSignal.ClonedApp&gt;, val emulator: SmartSignalInfo&lt;SmartSignal.Emulator&gt;, val factoryReset: SmartSignalInfo&lt;SmartSignal.FactoryReset&gt;, val frida: SmartSignalInfo&lt;SmartSignal.Frida&gt;, val highActivity: SmartSignalInfo&lt;SmartSignal.HighActivity&gt;, val locationSpoofing: SmartSignalInfo&lt;SmartSignal.LocationSpoofing&gt;, val root: SmartSignalInfo&lt;SmartSignal.Root&gt;, val vpn: SmartSignalInfo&lt;SmartSignal.Vpn&gt;, val tampering: SmartSignalInfo&lt;SmartSignal.Tampering&gt;, val mitm: SmartSignalInfo&lt;SmartSignal.Mitm&gt;, )</ID>
    <ID>LongParameterList:ValuePickerTextField.kt$( label: String, supportingText: String, values: List&lt;T&gt;, currentValue: T, valueDescription: T.() -&gt; String, onValueChanged: (T) -&gt; Unit, modifier: Modifier = Modifier, enabled: Boolean = true, )</ID>
    <ID>MagicNumber:FingerprintButton.kt$0.22f</ID>
    <ID>MagicNumber:FingerprintButton.kt$0.56f</ID>
    <ID>MagicNumber:HomeErrorScreen.kt$0.34f</ID>
    <ID>MagicNumber:HomeErrorScreen.kt$0.66f</ID>
    <ID>MagicNumber:HomeScreen.kt$500</ID>
    <ID>MagicNumber:HomeScreenUiStateCreator.kt$HomeScreenUiStateCreator$100</ID>
    <ID>MagicNumber:HomeViewModel.kt$HomeViewModel$2000</ID>
    <ID>MagicNumber:HomeViewModel.kt$HomeViewModel$4</ID>
    <ID>MagicNumber:HttpClient.kt$HttpClient.Response$200</ID>
    <ID>MagicNumber:HttpClient.kt$HttpClient.Response$299</ID>
    <ID>MagicNumber:MainActivity.kt$MainActivity$200L</ID>
    <ID>MagicNumber:Protected.kt$Protected$3</ID>
    <ID>MagicNumber:SharedPreferencesStorage.kt$SharedPreferencesStorage$23</ID>
    <ID>MagicNumber:SharedPreferencesStorage.kt$SharedPreferencesStorage$24</ID>
    <ID>MagicNumber:Shimmable.kt$0.5f</ID>
    <ID>MagicNumber:Shimmable.kt$220</ID>
    <ID>MagicNumber:Shimmable.kt$800</ID>
    <ID>MagicNumber:Shimmable.kt$90</ID>
    <ID>MatchingDeclarationName:AppBarDropdownMenu.kt$AppBarDropdownMenuItem</ID>
    <ID>MatchingDeclarationName:ColorExtended.kt$ColorSchemeExtended</ID>
    <ID>MatchingDeclarationName:ColorMaterial.kt$AppColors</ID>
    <ID>MatchingDeclarationName:EventPrettifiedView.kt$PrettifiedProperty</ID>
    <ID>MatchingDeclarationName:PreviewUtils.kt$PreviewMultipleConfigurations</ID>
    <ID>MatchingDeclarationName:Shimmable.kt$ShimmableState&lt;T&gt;</ID>
    <ID>MaxLineLength:HomeScreen.kt$HomeScreenInternal(state = HomeScreenUiState.Mocked.copy(content = HomeScreenUiState.Content.LoadingOrSuccess.SuccessMocked))</ID>
    <ID>MaxLineLength:HomeScreenUiState.kt$HomeScreenUiState.Content.Error.PublicApiKeyInvalid$override val description = "The public API key is missing or invalid. Ensure the key was entered correctly."</ID>
    <ID>MaxLineLength:HomeScreenUiState.kt$HomeScreenUiState.Content.Error.SecretApiKeyInvalid$override val description = "The provided secret API key is either missing or invalid. Please double-check that the key was entered correctly."</ID>
    <ID>MaxLineLength:HomeScreenUiState.kt$HomeScreenUiState.Content.Error.SecretApiKeyMismatch$override val description = "The provided secret API key is invalid. Make sure that provided public and secret API keys belong to the same application."</ID>
    <ID>MaxLineLength:HomeScreenUiState.kt$HomeScreenUiState.Content.Error.WrongRegion$override val description = "The public API key is not intended for the selected region. Visit Settings to change the region."</ID>
    <ID>MaxLineLength:HomeViewModel.kt$HomeViewModel$// todo (minor): consider using the latest loaded data to minimize UI transitions between loading and success states</ID>
    <ID>MaxLineLength:SettingsDetailsScreen.kt$text = "When enabled, the app will use your API keys to make all the requests. These requests will count towards your monthly allowance."</ID>
    <ID>MaxLineLength:SettingsDetailsUiState.kt$SettingsDetailsUiState.ValidationPromptState.Companion$description = "Your changes will not be saved. The app will continue to use the previously saved API keys."</ID>
    <ID>MaxLineLength:SharedPreferencesStorage.kt$SharedPreferencesStorage$"fpjs_prefs_v2_legacy"</ID>
    <ID>MaxLineLength:StateMocks.kt$StateMocks$asJson = "{\"browserName\":\"Other\",\"browserVersion\":\"\",\"confidence\":{\"score\":1},\"device\":\"Pixel 4 XL\",\"firstSeenAt\":{\"global\":\"2024-01-16T01:01:01.587Z\",\"subscription\":\"2024-01-16T01:01:01.587Z\"},\"incognito\":false,\"ip\":\"192.192.192.192\",\"ipLocation\":{\"accuracyRadius\":20,\"city\":{\"name\":\"Berlin\"},\"continent\":{\"code\":\"EU\",\"name\":\"Europe\"},\"country\":{\"code\":\"DE\",\"name\":\"Germany\"},\"latitude\":20.2020,\"longitude\":20.2020,\"postalCode\":\"123456\",\"subdivisions\":[{\"isoCode\":\"DE-BE\",\"name\":\"Berlin\"}],\"timezone\":\"Europe\\/Berlin\"},\"lastSeenAt\":{\"global\":\"2024-01-20T01:01:01.587Z\",\"subscription\":\"2024-01-20T01:01:01.587Z\"},\"meta\":{\"version\":\"v1.1.2221+e341fd375\"},\"os\":\"Android\",\"osVersion\":\"13\",\"visitorFound\":true,\"visitorId\":\"rVC74CiaXVZGVC69OBsP\"}"</ID>
    <ID>ReturnCount:HomeScreenUiStateCreator.kt$HomeScreenUiStateCreator$fun HomeScreenUiState.Content.Companion.create( fingerprintSdkResponse: FingerprintJSProResult, smartSignalsData: SmartSignalsData, isLoading: Boolean, onSmartSignalDocClicked: (url: String) -&gt; Unit = {}, onHideSignupPrompt: () -&gt; Unit = {}, onPutToClipboard: (String) -&gt; Unit = {}, onSignupPromptClicked: () -&gt; Unit = {}, onReload: () -&gt; Unit = {}, onSupportClicked: () -&gt; Unit = {}, onGotoApiKeysSettings: () -&gt; Unit = {}, ): HomeScreenUiState.Content</ID>
    <ID>ReturnCount:JSONSyntaxHighlighter.kt$JSONSyntaxHighlighter.JSONTokenizer$fun nextToken(): Token?</ID>
    <ID>ReturnCount:SmartSignalsBodyParser.kt$SmartSignalsBodyParser$@VisibleForTesting inline fun &lt;reified T : SmartSignal&gt; JsonObject.getSmartSignal( key: String, validation: T.() -&gt; Boolean = { true }, transformation: T.() -&gt; T = { this }, ): SmartSignalInfo&lt;T&gt;</ID>
    <ID>TooManyFunctions:HomeViewModel.kt$HomeViewModel : ViewModel</ID>
    <ID>UnusedPrivateMember:ColorMaterial.kt$@Preview @Composable private fun PreviewMaterialThemeColors1()</ID>
    <ID>UnusedPrivateMember:ColorMaterial.kt$@Preview @Composable private fun PreviewMaterialThemeColors2()</ID>
    <ID>UnusedPrivateMember:ColorMaterial.kt$@Preview @Composable private fun PreviewMaterialThemeColors3()</ID>
    <ID>UnusedPrivateMember:EventDetailsView.kt$@PreviewMultipleConfigurations @Composable private fun EventDetailsViewPreview()</ID>
    <ID>UnusedPrivateMember:EventPrettifiedView.kt$@Preview @Composable private fun PreviewLoading()</ID>
    <ID>UnusedPrivateMember:EventRawJsonView.kt$@PreviewMultipleConfigurations @Composable private fun Preview()</ID>
    <ID>UnusedPrivateMember:FingerprintButton.kt$@PreviewLightDark @Composable private fun Preview()</ID>
    <ID>UnusedPrivateMember:HomeErrorScreen.kt$@PreviewMultipleConfigurations @Composable private fun Preview()</ID>
    <ID>UnusedPrivateMember:HomeLoadingOrSuccessScreen.kt$@PreviewMultipleConfigurations @Composable private fun Loading()</ID>
    <ID>UnusedPrivateMember:HomeLoadingOrSuccessScreen.kt$@PreviewMultipleConfigurations @Composable private fun Success()</ID>
    <ID>UnusedPrivateMember:HomeScreen.kt$@PreviewLightDark @Composable private fun Success()</ID>
    <ID>UnusedPrivateMember:HomeTapToBeginScreen.kt$@PreviewMultipleConfigurations @Composable private fun Preview()</ID>
    <ID>UnusedPrivateMember:LinkableText.kt$@Preview @Composable private fun WithLink()</ID>
    <ID>UnusedPrivateMember:SettingsDetailsScreen.kt$@Preview @Composable private fun PreviewWithDialog()</ID>
    <ID>UnusedPrivateMember:SettingsDetailsScreen.kt$@PreviewLightDark @Composable private fun PreviewDisabled()</ID>
    <ID>UnusedPrivateMember:SettingsScreen.kt$@OptIn(ExperimentalSharedTransitionApi::class) @PreviewLightDark @Composable private fun Preview()</ID>
    <ID>UnusedPrivateMember:Shimmable.kt$@PreviewLightDark @Composable private fun ShimmedText()</ID>
    <ID>UnusedPrivateMember:SingupPromptView.kt$@PreviewLightDark @Composable private fun Preview()</ID>
    <ID>VariableNaming:HomeScreenUiStateCreator.kt$HomeScreenUiStateCreator$private val DETECTED_STRING = "Detected"</ID>
    <ID>VariableNaming:HomeScreenUiStateCreator.kt$HomeScreenUiStateCreator$private val NOT_AVAILABLE_STRING = "N/A"</ID>
    <ID>VariableNaming:HomeScreenUiStateCreator.kt$HomeScreenUiStateCreator$private val NOT_DETECTED_STRING = "Not detected"</ID>
    <ID>VariableNaming:StateMocks.kt$StateMocks$val HomeScreenUiState.Companion.Mocked by lazy { HomeScreenUiState( reload = HomeScreenUiState.ReloadState(false, {}), appBar = HomeScreenUiState.AppBarState({}, {}, {}), mocking = null, content = HomeScreenUiState.Content.LoadingOrSuccess.SuccessMocked, ) }</ID>
    <ID>VariableNaming:StateMocks.kt$StateMocks$val HomeScreenUiState.Content.Error.Companion.Mocked: HomeScreenUiState.Content.Error by lazy { HomeScreenUiState.Content.Error.Unknown({}, {}) }</ID>
    <ID>VariableNaming:StateMocks.kt$StateMocks$val HomeScreenUiState.Content.LoadingOrSuccess.Companion.LoadingMocked by lazy { HomeScreenUiState.Content.LoadingOrSuccess.SuccessMocked.copy( isLoading = true, ) }</ID>
    <ID>VariableNaming:StateMocks.kt$StateMocks$val HomeScreenUiState.Content.LoadingOrSuccess.Companion.SuccessMocked by lazy { with(homeScreenUiStateCreator) { HomeScreenUiState.Content.LoadingOrSuccess.create( fingerprintJSProResponse = fingerprintJSResponse, smartSignals = smartSignals, isLoading = false, isSmartSignalsLoading = false ) } }</ID>
    <ID>VariableNaming:StateMocks.kt$StateMocks$val HomeScreenUiState.Content.TapToBegin.Companion.Mocked by lazy { HomeScreenUiState.Content.TapToBegin(onTap = {}) }</ID>
  </CurrentIssues>
</SmellBaseline>
